{
	"info": {
		"_postman_id": "dd938c5d-d62a-485c-8642-36f282673541",
		"name": "Pokemon API Test Suite",
		"description": "# üß™ Comprehensive API Test Suite for PokeAPI\n\nThis collection demonstrates professional API testing practices, including:\n- Functional testing (happy path & edge cases)\n- Negative testing (error scenarios)\n- Schema validation (response structure)\n- Performance testing (response times)\n- Data-driven testing (parameterized execution)\n\n## Test Coverage:\n- Single Pokemon retrieval (/pokemon/{id})\n- Pokemon listing with pagination (/pokemon)\n- Type information and relationships (/type/{id})\n- Advanced chaining and performance tests\n\n## Environment Variables Required:\n- base_url: https://pokeapi.co/api/v2\n- response_time_threshold: 500\n- random_pokemon_id: (dynamic)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33175014"
	},
	"item": [
		{
			"name": "1. Single Pokemon Tests",
			"item": [
				{
					"name": "Pikachu (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Scripts",
									"pm.test(\"‚úÖ Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"‚ö° Response time is acceptable\", function () {",
									"    const threshold = parseInt(pm.environment.get(\"response_time_threshold\")) || 500;",
									"    pm.expect(pm.response.responseTime).to.be.below(threshold);",
									"    console.log(`Response time: ${pm.response.responseTime}ms (threshold: ${threshold}ms)`);",
									"});",
									"",
									"pm.test(\"üìù Response has correct Content-Type\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"üîç Response contains required Pokemon fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('types');",
									"    pm.expect(jsonData).to.have.property('abilities');",
									"    pm.expect(jsonData).to.have.property('stats');",
									"    pm.expect(jsonData).to.have.property('height');",
									"    pm.expect(jsonData).to.have.property('weight');",
									"});",
									"",
									"pm.test(\"‚ö° Pokemon name is pikachu\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"pikachu\");",
									"});",
									"",
									"pm.test(\"üÜî Pokemon ID is 25\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(25);",
									"});",
									"",
									"pm.test(\"üè∑Ô∏è Pokemon has electric type\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.types).to.be.an('array');",
									"    pm.expect(jsonData.types.length).to.be.greaterThan(0);",
									"    ",
									"    const hasElectricType = jsonData.types.some(type => type.type.name === \"electric\");",
									"    pm.expect(hasElectricType).to.be.true;",
									"});",
									"",
									"pm.test(\"üìä Stats array is properly structured\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.stats).to.be.an('array');",
									"    pm.expect(jsonData.stats.length).to.equal(6); // Pokemon have 6 stats",
									"    ",
									"    jsonData.stats.forEach(stat => {",
									"        pm.expect(stat).to.have.property('base_stat');",
									"        pm.expect(stat).to.have.property('effort');",
									"        pm.expect(stat).to.have.property('stat');",
									"        pm.expect(stat.stat).to.have.property('name');",
									"    });",
									"});",
									"",
									"// Store data for potential chaining",
									"pm.test(\"üíæ Store Pokemon data for chaining\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set(\"test_pokemon_name\", jsonData.name);",
									"    if (jsonData.types && jsonData.types.length > 0) {",
									"        pm.environment.set(\"test_pokemon_type\", jsonData.types[0].type.name);",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-request Script:",
									"console.log(\"üîç Testing Pikachu (ID: 25) - Happy Path\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/pokemon/25",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pokemon",
								"25"
							]
						}
					},
					"response": []
				},
				{
					"name": "1st Pokemon (Boundary Test)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script:",
									"eval(pm.globals.get(\"validateBasicResponse\"));",
									"eval(pm.globals.get(\"validateResponseTime\"));",
									"",
									"validateBasicResponse();",
									"validateResponseTime();",
									"",
									"pm.test(\"üå± Pokemon name is bulbasaur\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"bulbasaur\");",
									"});",
									"",
									"pm.test(\"üÜî Pokemon ID is 1\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(1);",
									"});",
									"",
									"pm.test(\"üè∑Ô∏è Pokemon has grass type\", function () {",
									"    const jsonData = pm.response.json();",
									"    const types = jsonData.types.map(typeInfo => typeInfo.type.name);",
									"    pm.expect(types).to.include(\"grass\");",
									"});",
									"",
									"pm.test(\"üìä Pokemon has valid stats array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.stats).to.be.an('array');",
									"    pm.expect(jsonData.stats.length).to.be.greaterThan(0);",
									"    ",
									"    // Validate first stat structure",
									"    const firstStat = jsonData.stats[0];",
									"    pm.expect(firstStat).to.have.property('base_stat');",
									"    pm.expect(firstStat).to.have.property('effort');",
									"    pm.expect(firstStat).to.have.property('stat');",
									"    pm.expect(firstStat.stat).to.have.property('name');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-request Script:",
									"console.log(\"üîç Testing Bulbasaur (ID: 1) - Boundary Test\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/pokemon/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pokemon",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Pokemon (Negative Test)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-request Script:",
									"console.log(\"‚ùå Testing Invalid Pokemon ID (99999) - Negative Test\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script:",
									"pm.test(\"‚ùå Status code is 404 for invalid Pokemon ID\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"‚ö° Response time is still acceptable for errors\", function () {",
									"    const threshold = parseInt(pm.environment.get(\"response_time_threshold\")) || 500;",
									"    pm.expect(pm.response.responseTime).to.be.below(threshold);",
									"});",
									"",
									"pm.test(\"üí¨ Error response is properly formatted\", function () {",
									"    // PokeAPI returns plain text \"Not Found\" for 404s",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText).to.include(\"Not Found\");",
									"});",
									"",
									"pm.test(\"üîí No sensitive information in error response\", function () {",
									"    const responseText = pm.response.text().toLowerCase();",
									"    pm.expect(responseText).to.not.include(\"sql\");",
									"    pm.expect(responseText).to.not.include(\"database\");",
									"    pm.expect(responseText).to.not.include(\"error:\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/pokemon/99999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pokemon",
								"99999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pokemon Schema Validation Test",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-request Script",
									"console.log(\"üîç Testing Pokemon Schema Validation with ID: 150 (Mewtwo)\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script:",
									"eval(pm.globals.get(\"validateBasicResponse\"));",
									"eval(pm.globals.get(\"validateResponseTime\"));",
									"",
									"validateBasicResponse();",
									"validateResponseTime();",
									"",
									"pm.test(\"üìã Complete Pokemon schema validation\", function () {",
									"    const schema = {",
									"        type: \"object\",",
									"        required: [\"id\", \"name\", \"height\", \"weight\", \"types\", \"abilities\", \"stats\"],",
									"        properties: {",
									"            id: { type: \"number\" },",
									"            name: { type: \"string\" },",
									"            height: { type: \"number\" },",
									"            weight: { type: \"number\" },",
									"            types: {",
									"                type: \"array\",",
									"                items: {",
									"                    type: \"object\",",
									"                    required: [\"slot\", \"type\"],",
									"                    properties: {",
									"                        slot: { type: \"number\" },",
									"                        type: {",
									"                            type: \"object\",",
									"                            required: [\"name\", \"url\"],",
									"                            properties: {",
									"                                name: { type: \"string\" },",
									"                                url: { type: \"string\" }",
									"                            }",
									"                        }",
									"                    }",
									"                }",
									"            },",
									"            abilities: {",
									"                type: \"array\",",
									"                items: {",
									"                    type: \"object\",",
									"                    required: [\"is_hidden\", \"slot\", \"ability\"],",
									"                    properties: {",
									"                        is_hidden: { type: \"boolean\" },",
									"                        slot: { type: \"number\" },",
									"                        ability: {",
									"                            type: \"object\",",
									"                            required: [\"name\", \"url\"],",
									"                            properties: {",
									"                                name: { type: \"string\" },",
									"                                url: { type: \"string\" }",
									"                            }",
									"                        }",
									"                    }",
									"                }",
									"            },",
									"            stats: {",
									"                type: \"array\",",
									"                minItems: 6,",
									"                items: {",
									"                    type: \"object\",",
									"                    required: [\"base_stat\", \"effort\", \"stat\"],",
									"                    properties: {",
									"                        base_stat: { type: \"number\" },",
									"                        effort: { type: \"number\" },",
									"                        stat: {",
									"                            type: \"object\",",
									"                            required: [\"name\", \"url\"],",
									"                            properties: {",
									"                                name: { type: \"string\" },",
									"                                url: { type: \"string\" }",
									"                            }",
									"                        }",
									"                    }",
									"                }",
									"            }",
									"        }",
									"    };",
									"    ",
									"    const jsonData = pm.response.json();",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"üß¨ Mewtwo specific validations\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"mewtwo\");",
									"    pm.expect(jsonData.id).to.eql(150);",
									"    ",
									"    const types = jsonData.types.map(typeInfo => typeInfo.type.name);",
									"    pm.expect(types).to.include(\"psychic\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/pokemon/150",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pokemon",
								"150"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. Pokemon List Tests",
			"item": [
				{
					"name": "Pokemon List (Pagination)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-request Script:",
									"console.log(\"üìã Testing Pokemon List - Pagination\");",
									"pm.environment.set(\"pagination_limit\", \"20\");",
									"pm.environment.set(\"pagination_offset\", \"0\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script:",
									"eval(pm.globals.get(\"validateBasicResponse\"));",
									"eval(pm.globals.get(\"validateResponseTime\"));",
									"",
									"validateBasicResponse();",
									"validateResponseTime();",
									"",
									"pm.test(\"üìä List response has correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('count');",
									"    pm.expect(jsonData).to.have.property('next');",
									"    pm.expect(jsonData).to.have.property('previous');",
									"    pm.expect(jsonData).to.have.property('results');",
									"});",
									"",
									"pm.test(\"üì¶ Results array contains expected number of items\", function () {",
									"    const jsonData = pm.response.json();",
									"    const limit = parseInt(pm.environment.get(\"pagination_limit\"));",
									"    pm.expect(jsonData.results).to.be.an('array');",
									"    pm.expect(jsonData.results.length).to.eql(limit);",
									"});",
									"",
									"pm.test(\"üîó Each Pokemon result has name and url\", function () {",
									"    const jsonData = pm.response.json();",
									"    jsonData.results.forEach((pokemon, index) => {",
									"        pm.expect(pokemon, `Pokemon ${index}`).to.have.property('name');",
									"        pm.expect(pokemon, `Pokemon ${index}`).to.have.property('url');",
									"        pm.expect(pokemon.name, `Pokemon ${index} name`).to.be.a('string');",
									"        pm.expect(pokemon.url, `Pokemon ${index} url`).to.match(/^https:\\/\\/pokeapi\\.co\\/api\\/v2\\/pokemon\\/\\d+\\/$/);",
									"    });",
									"});",
									"",
									"pm.test(\"üî¢ Count is a reasonable number\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.count).to.be.a('number');",
									"    pm.expect(jsonData.count).to.be.greaterThan(1000); // Should be over 1000 Pokemon",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/pokemon?limit=20&offset=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pokemon"
							],
							"query": [
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Single Pokemon Limit (Edge Case)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-request Script:",
									"console.log(\"üîç Testing Single Pokemon Limit - Edge Case\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script:",
									"eval(pm.globals.get(\"validateBasicResponse\"));",
									"eval(pm.globals.get(\"validateResponseTime\"));",
									"",
									"validateBasicResponse();",
									"validateResponseTime();",
									"",
									"pm.test(\"üì¶ Single result returned\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.results).to.be.an('array');",
									"    pm.expect(jsonData.results.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"‚ö° Result should be Pikachu (offset 24 = id 25)\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.results[0].name).to.eql(\"pikachu\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/pokemon?limit=1&offset=24",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pokemon"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": "24"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Limit Parameter (Negative Test)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script:",
									"// PokeAPI handles invalid limits by using default values",
									"pm.test(\"üîß API handles invalid limit gracefully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"üìä Default limit is applied for invalid input\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.results).to.be.an('array');",
									"    pm.expect(jsonData.results.length).to.eql(1301); // Default limit",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-request Script:",
									"console.log(\"‚ùå Testing Invalid Limit Parameter - Negative Test\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/pokemon?limit=-1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pokemon"
							],
							"query": [
								{
									"key": "limit",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3. Type Relationship Tests",
			"item": [
				{
					"name": "Electric Type (Happy Path)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-request Script:",
									"console.log(\"‚ö° Testing Electric Type - Happy Path\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script:",
									"eval(pm.globals.get(\"validateBasicResponse\"));",
									"eval(pm.globals.get(\"validateResponseTime\"));",
									"",
									"validateBasicResponse();",
									"validateResponseTime();",
									"",
									"pm.test(\"‚ö° Type name is electric\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"electric\");",
									"    pm.expect(jsonData.id).to.eql(13);",
									"});",
									"",
									"pm.test(\"üîó Type has damage relations\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('damage_relations');",
									"    pm.expect(jsonData.damage_relations).to.have.property('double_damage_to');",
									"    pm.expect(jsonData.damage_relations).to.have.property('half_damage_from');",
									"});",
									"",
									"pm.test(\"‚ö° Electric type Pokemon list includes Pikachu\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('pokemon');",
									"    ",
									"    const pokemonNames = jsonData.pokemon.map(p => p.pokemon.name);",
									"    pm.expect(pokemonNames).to.include('pikachu');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/type/13",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"type",
								"13"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Type (Negative)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-request Script:",
									"console.log(\"‚ùå Testing Invalid Type ID (999) - Negative Test\");",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script:",
									"pm.test(\"‚ùå Status code is 404 for invalid type ID\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"‚ö° Response time is acceptable even for errors\", function () {",
									"    const threshold = parseInt(pm.environment.get(\"response_time_threshold\")) || 500;",
									"    pm.expect(pm.response.responseTime).to.be.below(threshold);",
									"});",
									"",
									"pm.test(\"üí¨ Error response is clean\", function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText).to.include(\"Not Found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/type/999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"type",
								"999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Type Schema Validation Test",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-request Script:",
									"console.log(\"üìã Testing Normal Type (ID: 1) - Schema Validation\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script:",
									"eval(pm.globals.get(\"validateBasicResponse\"));",
									"eval(pm.globals.get(\"validateResponseTime\"));",
									"",
									"validateBasicResponse();",
									"validateResponseTime();",
									"",
									"pm.test(\"üìã Complete Type schema validation\", function () {",
									"    const schema = {",
									"        type: \"object\",",
									"        required: [\"id\", \"name\", \"damage_relations\", \"pokemon\"],",
									"        properties: {",
									"            id: { type: \"number\" },",
									"            name: { type: \"string\" },",
									"            damage_relations: {",
									"                type: \"object\",",
									"                required: [\"no_damage_to\", \"half_damage_to\", \"double_damage_to\", \"no_damage_from\", \"half_damage_from\", \"double_damage_from\"],",
									"                properties: {",
									"                    no_damage_to: { type: \"array\" },",
									"                    half_damage_to: { type: \"array\" },",
									"                    double_damage_to: { type: \"array\" },",
									"                    no_damage_from: { type: \"array\" },",
									"                    half_damage_from: { type: \"array\" },",
									"                    double_damage_from: { type: \"array\" }",
									"                }",
									"            },",
									"            pokemon: {",
									"                type: \"array\",",
									"                items: {",
									"                    type: \"object\",",
									"                    required: [\"slot\", \"pokemon\"],",
									"                    properties: {",
									"                        slot: { type: \"number\" },",
									"                        pokemon: {",
									"                            type: \"object\",",
									"                            required: [\"name\", \"url\"],",
									"                            properties: {",
									"                                name: { type: \"string\" },",
									"                                url: { type: \"string\" }",
									"                            }",
									"                        }",
									"                    }",
									"                }",
									"            }",
									"        }",
									"    };",
									"    ",
									"    const jsonData = pm.response.json();",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"üè∑Ô∏è Normal type has expected properties\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"normal\");",
									"    pm.expect(jsonData.id).to.eql(1);",
									"    ",
									"    // Normal type should have no effect on Ghost types",
									"    const noEffectAgainst = jsonData.damage_relations.no_damage_to.map(type => type.name);",
									"    pm.expect(noEffectAgainst).to.include(\"ghost\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/type/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"type",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4. Performance & Advanced Testing",
			"item": [
				{
					"name": "Response Time Stress Test",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-request Script:",
									"console.log(\"‚ö° Performance Stress Test - Random Pokemon\");",
									"// Generate a random Pokemon ID between 1 and 1025",
									"const randomId = Math.floor(Math.random() * 1025) + 1;",
									"pm.environment.set(\"random_pokemon_id\", randomId.toString());",
									"console.log(`üé≤ Testing Pokemon ID: ${randomId}`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script:",
									"pm.test(\"‚úÖ Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"‚ö° Performance requirement: Response under 300ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"    console.log(`‚ö° Response time: ${pm.response.responseTime}ms`);",
									"});",
									"",
									"pm.test(\"üìä Response size is reasonable\", function () {",
									"    const responseSize = pm.response.responseSize;",
									"    pm.expect(responseSize).to.be.below(500000); // Less than 50KB",
									"    console.log(`üìä Response size: ${responseSize} bytes`);",
									"});",
									"",
									"pm.test(\"üîç Random Pokemon has valid data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('number');",
									"    pm.expect(jsonData.name).to.be.a('string');",
									"    pm.expect(jsonData.types).to.be.an('array');",
									"    pm.expect(jsonData.types.length).to.be.greaterThan(0);",
									"});",
									"",
									"// Store data for next chained test",
									"pm.test(\"üîó Store data for chain test\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set(\"chain_pokemon_name\", jsonData.name);",
									"    pm.environment.set(\"chain_pokemon_type_url\", jsonData.types[0].type.url);",
									"    pm.environment.set(\"chain_pokemon_ability_url\", jsonData.abilities[0].ability.url);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/pokemon/{{random_pokemon_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pokemon",
								"{{random_pokemon_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Concurrent Request Simulation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"// Pre-request Script:",
									"console.log(\"üöÄ Concurrent Request Simulation Test\");",
									"// Simulate multiple concurrent requests by adding timestamp",
									"pm.environment.set(\"concurrent_test_timestamp\", Date.now().toString());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script:",
									"eval(pm.globals.get(\"validateBasicResponse\"));",
									"",
									"validateBasicResponse();",
									"",
									"pm.test(\"‚ö° Handles concurrent-style requests efficiently\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"üîí Response consistency under load simulation\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"pikachu\");",
									"    pm.expect(jsonData.id).to.eql(25);",
									"    ",
									"    // Verify data hasn't been corrupted",
									"    pm.expect(jsonData.types).to.be.an('array');",
									"    pm.expect(jsonData.abilities).to.be.an('array');",
									"    pm.expect(jsonData.types.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/pokemon/pikachu",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pokemon",
								"pikachu"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Set dynamic variables and utilities",
					"pm.globals.set(\"timestamp\", new Date().toISOString());",
					"pm.globals.set(\"test_run_id\", pm.variables.replaceIn(\"{{$guid}}\"));",
					"",
					"// Utility functions for reuse across tests",
					"pm.globals.set(\"validateResponseTime\", `",
					"function validateResponseTime(threshold = 500) {",
					"    pm.test(\"‚ö° Response time is acceptable\", function () {",
					"        pm.expect(pm.response.responseTime).to.be.below(threshold);",
					"        console.log(\\`Response time: \\${pm.response.responseTime}ms (threshold: \\${threshold}ms)\\`);",
					"    });",
					"}",
					"`);",
					"",
					"pm.globals.set(\"validateBasicResponse\", `",
					"function validateBasicResponse() {",
					"    pm.test(\"‚úÖ Status code is 200\", function () {",
					"        pm.response.to.have.status(200);",
					"    });",
					"    ",
					"    pm.test(\"üì¶ Response has JSON content\", function () {",
					"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"    });",
					"}",
					"`);",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Log test completion",
					"console.log(`‚úÖ Test completed at: ${new Date().toISOString()}`);",
					"",
					"// Collection-level cleanup",
					"if (pm.info.iteration === pm.info.iterationCount - 1) {",
					"    console.log(\"üßπ Cleaning up test variables...\");",
					"    pm.environment.unset(\"random_pokemon_id\");",
					"    pm.environment.unset(\"chain_pokemon_name\");",
					"    pm.environment.unset(\"chain_pokemon_type_url\");",
					"    pm.environment.unset(\"concurrent_test_timestamp\");",
					"}"
				]
			}
		}
	]
}